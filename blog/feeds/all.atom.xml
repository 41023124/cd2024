<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>協同產品設計實習</title><link href="./" rel="alternate"></link><link href="./feeds/all.atom.xml" rel="self"></link><id>./</id><updated>2024-03-29T09:47:12+08:00</updated><entry><title>2024 Spring 課程</title><link href="./2024-Spring-w-blog-tutorial.html" rel="alternate"></link><published>2024-02-23T16:39:00+08:00</published><updated>2024-03-29T08:21:34+08:00</updated><author><name>41023124</name></author><id>tag:None,2024-02-23:./2024-Spring-w-blog-tutorial.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;


&lt;h1&gt;內容管理系統&lt;/h1&gt;
&lt;p&gt;使用者可以自行利用 &lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; 倉儲作為 Template, 建立自己的網站內容管理系統.&lt;/p&gt;
&lt;p&gt;引用網站網址連結的方法:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; - 在文章中多次引用同一個網站連結時, 可以使用此種方法.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;https://github.com/mdecycu/cmsimde_site&lt;/a&gt; - 假如想要快速將網址套用 html 網站連結, 可以使用此種方法.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; - 也可以使用 Markdown 的標準網站連結使用格式.&lt;/p&gt;
&lt;pre class="brush: python"&gt;
# 引用 Python 程式的方法
for i in range(10):
    print(i, "列出字串")
&lt;/pre&gt;

&lt;p&gt;也可以直接在 .md 檔案中使用 html 標註, 或加入 Javascript 或 Brython 程式碼.&lt;/p&gt;
&lt;p&gt;從 1 累加到 100:&lt;/p&gt;
&lt;p&gt;&lt;button id="add1to100"&gt;1 add to 100&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;將 iterable 與 iterator &lt;a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438"&gt;相關說明&lt;/a&gt;, 利用 Brython 與 Ace Editor 整理在這個頁面.&lt;/p&gt;
&lt;!-- 導入 brython 程式庫 --&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/brython.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;!-- 啟動 Brython --&gt;
&lt;p&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 FileSaver 與 filereader --&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/ace/FileSaver.min.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/filereader.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 ace --&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/ace/ace.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/ext-language_tools.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/mode-python3.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/snippets/python.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 --&gt;
&lt;script src="./../cmsimde/static/Cango-24v03-min.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/gearUtils-09.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/SVGpathUtils-6v03-min.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/sylvester.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/PrairieDraw.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/javascript"&gt;
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 開始 --&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 結束--&gt;&lt;/p&gt;
&lt;!-- editor1 開始 --&gt;
&lt;p&gt;&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;&lt;/p&gt;
&lt;div id="kw_editor1" style="width: 600px; height: 300px;"&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 存擋表單開始 --&gt;&lt;/p&gt;
&lt;form&gt;&lt;label&gt;Filename: &lt;input id="kw_filename" placeholder="input file name" type="text"/&gt;.py&lt;/label&gt; &lt;input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/&gt;&lt;/form&gt;
&lt;p&gt;&lt;!-- 存擋表單結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕開始 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;button id="kw_run1"&gt;Run&lt;/button&gt; &lt;button id="kw_show_console1"&gt;Output&lt;/button&gt; &lt;button id="kw_clear_console1"&gt;清除輸出區&lt;/button&gt;&lt;button id="clear_bd1"&gt;清除繪圖區&lt;/button&gt;&lt;button onclick="window.location.reload()"&gt;Reload&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 程式執行 ouput 區 --&gt;&lt;/p&gt;
&lt;div style="width: 100%; height: 100%;"&gt;&lt;textarea autocomplete="off" id="kw_console1"&gt;&lt;/textarea&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --&gt;&lt;/p&gt;
&lt;div id="brython_div1"&gt;&lt;/div&gt;
&lt;!-- editor1 結束 --&gt;
&lt;hr/&gt;&lt;!-- ########################################## --&gt;&lt;p&gt;從 1 累加到 100 part2:&lt;/p&gt;
&lt;p&gt;&lt;button id="add1to100part2"&gt;1 add to 100&lt;/button&gt;&lt;button id="cango_three_gears"&gt;cango_three_gears&lt;/button&gt;&lt;button id="bsnake"&gt;BSnake&lt;/button&gt;&lt;button id="aitetris"&gt;AI Tetris&lt;/button&gt;&lt;button id="threejsblock"&gt;Rotating Block&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 part2 開始 --&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 part2 結束--&gt;&lt;/p&gt;
&lt;!-- editor2 開始 --&gt;
&lt;p&gt;&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;&lt;/p&gt;
&lt;div id="kw_editor2" style="width: 600px; height: 300px;"&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 存擋表單開始 --&gt;&lt;/p&gt;
&lt;form&gt;&lt;label&gt;Filename: &lt;input id="kw_filename2" placeholder="input file name" type="text"/&gt;.py&lt;/label&gt; &lt;input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/&gt;&lt;/form&gt;
&lt;p&gt;&lt;!-- 存擋表單結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕開始 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;button id="kw_run2"&gt;Run&lt;/button&gt; &lt;button id="kw_show_console2"&gt;Output&lt;/button&gt; &lt;button id="kw_clear_console2"&gt;清除輸出區&lt;/button&gt;&lt;button id="clear_bd2"&gt;清除繪圖區&lt;/button&gt;&lt;button onclick="window.location.reload()"&gt;Reload&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 程式執行 ouput 區 --&gt;&lt;/p&gt;
&lt;div style="width: 100%; height: 100%;"&gt;&lt;textarea autocomplete="off" id="kw_console2"&gt;&lt;/textarea&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --&gt;&lt;/p&gt;
&lt;div id="brython_div2"&gt;&lt;/div&gt;
&lt;!-- editor2 結束 --&gt;
&lt;hr/&gt;&lt;p&gt;
&lt;script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"&gt;&lt;/script&gt;</content><category term="w1"></category><category term="網誌編寫"></category></entry><entry><title>2024 Spring 課程 w1</title><link href="./2024-Spring-w1-blog-tutorial.html" rel="alternate"></link><published>2024-02-23T16:39:00+08:00</published><updated>2024-03-29T08:22:05+08:00</updated><author><name>41023124</name></author><id>tag:None,2024-02-23:./2024-Spring-w1-blog-tutorial.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;

&lt;h1&gt;每周進度報告w1&lt;/h1&gt;
&lt;p&gt;依照mde.tw/cd2024中的 Topics / Video中的影片&lt;/p&gt;
&lt;p&gt;建立個人課程 cd2024 倉儲與網站的操作影片 (7:17)&lt;/p&gt;
&lt;p&gt;設定 Replit 與 Github 應用授權的說明影片 (2:44)&lt;/p&gt;
&lt;p&gt;說明如何設定 Github 雙重認證 (6:28)&lt;/p&gt;
&lt;p&gt;說明如何利用 Replit 對 cd2024 改版 (20:16)&lt;/p&gt;
&lt;p&gt;照著影片中的步驟創建個人的cd2024倉儲與網站與如何與Replit連結Github，並更新上推至倉儲去做更新&lt;/p&gt;
&lt;p&gt;設定網誌&lt;/p&gt;
&lt;p&gt;利用 [OBS] 加上廣播系統錄製的: 如何設定個人倉儲中的 Pelican 網誌&lt;/p&gt;</content><category term="w1"></category><category term="網誌編寫"></category></entry><entry><title>2024 Spring 課程 w2</title><link href="./2024-Spring-w2-blog-tutorial.html" rel="alternate"></link><published>2024-02-23T16:39:00+08:00</published><updated>2024-03-29T08:22:01+08:00</updated><author><name>41023124</name></author><id>tag:None,2024-02-23:./2024-Spring-w2-blog-tutorial.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;

&lt;h1&gt;每周進度報告w2&lt;/h1&gt;
&lt;p&gt;協同產品設計實習的第二週, 主要利用 Github Classroom 進行協同分組, 並引導學員除了 Replit, 可以利用 Github Codespaces 維護個人或分組網站內容.&lt;/p&gt;
&lt;p&gt;利用 Github Classroom 指定分組倉儲
由於各分組網站從 Github Classroom 執行配置, 因此該倉儲位於 mdecd2024 帳號下, 雖然各組組員具備對此分組倉儲改版的權限, 但是若將分組倉儲 import 到 Replit, 因為其倉儲擁有者為 mdecd2024, 因此無法從 Replit accoount 項下進行授權, 但是可以利用 ssh-keygen 建立 .ssh 目錄下的 id_rsa 與 id_rsa.pub, 之後除了將公鑰送到 Github 之外, 還需要在 .ssh 目錄中建立 config, 且將倉儲 .git/config 中的 https 協定改為 SSH.&lt;/p&gt;
&lt;p&gt;根據上述流程, 可以在 Replit 中以 SSH 模式取得對 Github 帳號下特定倉儲的改版全縣, 只不過 Replit 的免費帳號環境會不定時刪除 /home/runner/.ssh 目錄中的授權資料, 因此若要使用 Replit 維護從 Github Classroom 取得授權的分組倉儲, 必須使用程式方法配置 .ssh 中的 id_rsa 與 config 檔案.&lt;/p&gt;
&lt;p&gt;範例分組倉儲: https://github.com/mdecd2024/test-ag1&lt;/p&gt;
&lt;p&gt;期中分組作業名稱甲班為 2a, 其中甲班第一組組長必須建立名稱為 midag1 的 Team, 讓第一組的組員員加入. 其餘各組的期中報告 Team 名稱則分別為 midag2, midag3 ....&lt;/p&gt;
&lt;p&gt;根據上述規劃, 甲班第一分組的期中協同倉儲將位於: https://github.com/mdecd2024/2a-midag1, 第一組的期中報告網站將位於: https://mdecd2024.github.io/2a-midag1.&lt;/p&gt;
&lt;p&gt;待各分組的期中報告 Team 與倉儲全部建立就緒後, 則甲班學員後續可配合期末作業名稱 2a2, 由甲班各組組長建立 Team finalag1, finalag2 ....等.&lt;/p&gt;
&lt;p&gt;利用 Codespaces 維護倉儲與網站
說明如何利用 Github Codespaces 維護網站內容&lt;/p&gt;
&lt;p&gt;由於 Github Codespaces 免費帳號目前每月可以使用 120 core hours, 因此使用者可以選擇在 Github 倉儲中編輯 markdown 目錄中的網誌 .md 文章後, 只在需要利用 pelican 轉檔或啟動編輯 config/content.htm 與轉靜態網頁內容時, 才啟用 Codespaces. 如此可以最佳化使用 Codespaces 的免費 core hours.&lt;/p&gt;
&lt;p&gt;ODOO 參考資料
https://www.google.com/search?q=sap+vs+odoo (與 SAP 及 ODOO 有關的搜尋)&lt;/p&gt;
&lt;p&gt;2021 ANALYSIS OF THE ODOO SOFTWARE CAPABILITIES REGARDING PRODUCT LIFECYCLE MANAGEMENT, MANUFACTURING EXECUTION SYSTEMS AND THEIR INTEGRATION.pdf or local download (password required) (Odoo 軟體在產品生命週期管理、製造執行系統及其整合上的功能分析)&lt;/p&gt;
&lt;p&gt;英文單字查詢: 2021_odoo_reading.html&lt;/p&gt;
&lt;p&gt;針對以上課程內容, 請利用以下留言系統進行討論:&lt;/p&gt;</content><category term="w1"></category><category term="網誌編寫"></category></entry><entry><title>2024 Spring 課程 w3</title><link href="./2024-Spring-w3-blog-tutorial.html" rel="alternate"></link><published>2024-02-23T16:39:00+08:00</published><updated>2024-03-29T09:42:35+08:00</updated><author><name>41023124</name></author><id>tag:None,2024-02-23:./2024-Spring-w3-blog-tutorial.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;

&lt;h1&gt;每周進度報告w3&lt;/h1&gt;
&lt;p&gt;W3 任務交付
cd2024 w3 任務&lt;/p&gt;
&lt;p&gt;請各組將組員的個人課程倉儲 cd2024 設為分組倉儲 2a-midag1 的子模組, 且以各組員的學號作為子模組的名稱&lt;/p&gt;
&lt;p&gt;如何在倉儲中設定子模組, 為何要將資料設為子模組?&lt;/p&gt;
&lt;p&gt;能不能在 Replit 維護分組網站? 其他方法還可以直接使用 Codespaces, Gitpod 與 localhost 維護倉儲與網站&lt;/p&gt;
&lt;p&gt;假如仍希望使用 Replit 維護分組網站, 該如何進行?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;請各組員將負責分工處理的 https://webthesis.biblio.polito.it/16429/1/tesi.pdf 中英文並列資料 (LaTeX) 放在個人的倉儲網站, 最後在分組倉儲中整合建立出各組的期中報告 pdf 檔案&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;該文章有 87 頁, 若有八名組員, 則每人可分工負責 11 頁, 若兩組以上結合協同, 則可按照規劃, 從文章標題開始到最後一頁, 先分配各組員任務後展開中英文並列編輯, 可以使用翻譯軟體或 ChatGPT 協助進行內容解釋或翻譯, 各組通篇完成中英並列資料整合後, 各學員必須於個人的課程倉儲 cd2024 中整理出協同過程的心得.&lt;/p&gt;
&lt;p&gt;當文章翻譯或了解其內容後, 接下來該如何套用到期中報告題目: ODOO PLM 在協同產品設計上的應用 - 以鋼球平衡台機電控制系統設計為例&lt;/p&gt;
&lt;p&gt;假如採用 Onshape 進行零組件設計繪圖&lt;/p&gt;
&lt;p&gt;本周為第三周，進度是照著網誌中的影片將組員的個人倉儲設為分組倉儲子模組與有關 LaTeX 轉 pdf 在 Windows 環境, 說明如何利用 LaTeX 協同建立分組報告。&lt;/p&gt;
&lt;p&gt;2024 Spring 協同產品設計實習的第三週, 主要說明如何善用 Github Codespaces 與 Gitpod, 以及將組員倉儲設為分組倉儲的子模組, 同時導入 LaTeX 轉 pdf 機制, 啟動期中分組報告的製作.&lt;/p&gt;
&lt;p&gt;列出期中分組倉儲與網站&lt;/p&gt;
&lt;p&gt;cd2024 期中分組倉儲與網站
期中協同分組報告&lt;/p&gt;
&lt;p&gt;請參考 https://github.com/mdecd2024/test-ag1 中的 latex 目錄與 downloads 目錄中的 https://github.com/mdecd2024/test-ag1/blob/main/downloads/report_github.txt&lt;/p&gt;
&lt;p&gt;並根據下列教學範例:&lt;/p&gt;
&lt;p&gt;說明如何將 41123130 的個人倉儲設為 2a-midag2 分組倉儲的子模組&lt;/p&gt;
&lt;p&gt;說明如何將組員的個人倉儲納入分組倉儲成為子模組&lt;/p&gt;
&lt;p&gt;說明如何在 Replit 維護分組倉儲&lt;/p&gt;
&lt;p&gt;由各組員在其個人的 cd2024 倉儲中, 以 LaTeX 格式分工完成下列文章的英文與中文翻譯並列資料, 最後在分組網站的 Release 或 downloads 區完成 2b-midbgx_report.pdf 的製作.&lt;/p&gt;
&lt;p&gt;若要在近端使用可攜程式環境編譯分組 LaTeX 報告, 請下載 miktex-portable.7z (需要密碼, 下載 167MB, 解開壓縮檔案後約 1GB) 以及參考資料: latex_images_github.7z (需要密碼)&lt;/p&gt;
&lt;p&gt;2021 ANALYSIS OF THE ODOO SOFTWARE CAPABILITIES REGARDING PRODUCT LIFECYCLE MANAGEMENT, MANUFACTURING EXECUTION SYSTEMS AND THEIR INTEGRATION.pdf or local download (password required) (Odoo 軟體在產品生命週期管理、製造執行系統及其整合上的功能分析)&lt;/p&gt;
&lt;p&gt;英文單字查詢: 2021_odoo_reading.html&lt;/p&gt;
&lt;p&gt;有關 Codespaces 使用&lt;/p&gt;
&lt;p&gt;由於 Github Codespaces 免費帳號目前每月可以使用 120 core hours, 因此使用者可以選擇在 Github 倉儲中編輯 markdown 目錄中的網誌 .md 文章後, 只在需要利用 pelican 轉檔或啟動編輯 config/content.htm 與轉靜態網頁內容時, 才啟用 Codespaces. 如此可以最佳化使用 Codespaces 的免費 core hours.&lt;/p&gt;
&lt;p&gt;使用 Gitpod 維護倉儲與網站&lt;/p&gt;
&lt;p&gt;Gitpod 與 Codespaces 類似, 也是採用 Visual Studio Code 網際介面, 可讓使用者維護位於 Github 的倉儲, 只是個人的 cd2024 倉儲, 以 Github 帳號登入 Gitpod 之後, 可以直接維護, 但是分組網站是從 Github Classroom mdecd2024 帳號下派任, 與 Replit 環境維護分組網站的方法相同, 必須自行建立 .ssh 下的 id_rsa 與 config, 差別是一旦在 Gitpod 導入的分組網站 SSH 管理權限, 不會像 Replit 免費帳號下, 系統會定期刪除免費帳號使用者的 .ssh 目錄.&lt;/p&gt;
&lt;p&gt;在 Gitpod 導入 Github 倉儲後, 路徑位於 /workspace/ 目錄下, 但是 .ssh 目錄則位於 /home/gitpod/.ssh, 當使用者執行 cd 則會進入 /home/gitpod 目錄, 且使用者在 Gitpod 的 Dashboard 可以從 https://gitpod.io 進入.&lt;/p&gt;
&lt;p&gt;說明使用 Gitpod 維護個人網站&lt;/p&gt;
&lt;p&gt;說明使用 Gitpod 維護分組網站&lt;/p&gt;
&lt;p&gt;電腦教室中的協同設計&lt;/p&gt;
&lt;p&gt;cd2024 起, 電腦輔助設計室中的每一台電腦已經各自擁有一個外部 IPv4 網址, 因此各組員可將個人倉儲與分組倉儲 git clone 至隨身碟, 利用 Token 或 SSH session 授權維護倉儲與網站內容.&lt;/p&gt;
&lt;p&gt;如何利用 Classic Token 授權維護倉儲與網站&lt;/p&gt;
&lt;p&gt;ODOO 參考資料&lt;/p&gt;
&lt;p&gt;https://www.google.com/search?q=sap+vs+odoo (與 SAP 及 ODOO 有關的搜尋)&lt;/p&gt;
&lt;p&gt;2021 ANALYSIS OF THE ODOO SOFTWARE CAPABILITIES REGARDING PRODUCT LIFECYCLE MANAGEMENT, MANUFACTURING EXECUTION SYSTEMS AND THEIR INTEGRATION.pdf or local download (password required) (Odoo 軟體在產品生命週期管理、製造執行系統及其整合上的功能分析)&lt;/p&gt;
&lt;p&gt;英文單字查詢: 2021_odoo_reading.html&lt;/p&gt;
&lt;p&gt;將組員的個人倉儲設為分組倉儲子模組&lt;/p&gt;
&lt;p&gt;cd2024 課程希望將各分組的組員個人網站, 以 submodule 的方式納入各分組倉儲與網站, 設定的指令為:&lt;/p&gt;
&lt;p&gt;git submodule add 組員的個人倉儲網址 組員的學號&lt;/p&gt;
&lt;p&gt;例如: 假設組員的 cd2024 個人倉儲位於: https://github.com/scrum-1/cd2024, 且該組員的學號為 41123299, 則該組員必須在進入該組的倉儲目錄後, 執行:&lt;/p&gt;
&lt;p&gt;git submodule add https://github.com/scrum-1/cd2024.git 41123299&lt;/p&gt;
&lt;p&gt;如此, Github 帳號為 scrum-1 的組員, 其個人倉儲就會設定為分組倉儲的子模組, 而且是以其學號命名此一子模組的目錄名稱. 這樣設定的好處是: 各組員可以自行管理個人的課程倉儲與網站, 也就是位於其 Github 帳號下的 cd2024, 並且自行決定要整合到分組倉儲與網站的版本. 也能將自己在課程網站的資料, 直接用連結導入分組網站, 無需額外將資料搬進分組倉儲.&lt;/p&gt;
&lt;p&gt;另外一個使用 Github Classroom 派送分組倉儲的好處, 是 mdecycu 自動成為各分組倉儲的管理者之一, 若各組在改版或解決衝突的過程發生問題, mdecycu 可以協助處理.&lt;/p&gt;
&lt;p&gt;一旦分組倉儲帶有以各組員學號作為子模組之後, git clone 倉儲必須使用:&lt;/p&gt;
&lt;p&gt;git clone --recurse-submodules 加上各組的倉儲 URL&lt;/p&gt;
&lt;p&gt;以第一組期中分組倉儲的 git clone 為例, 並且使用 putty session 名稱 github.com:&lt;/p&gt;
&lt;p&gt;git clone --recurse-submodules git@github.com:mdecd2024/2b-midbg1.git&lt;/p&gt;
&lt;p&gt;而且若要在分組倉儲中更新各組員的子模組版本, 則必須更換目錄到該組員的學號目錄中並且使用 git pull origin main, 才能取下該組員其 cd2024 個人倉儲的最新內容. 取下組員資料後, 若要新增提交推送, 則必須再更換目錄回分組倉儲後才能執行.&lt;/p&gt;
&lt;p&gt;有關 LaTeX 轉 pdf&lt;/p&gt;
&lt;p&gt;在 Windows 環境, 說明如何利用 LaTeX 協同建立分組報告&lt;/p&gt;
&lt;p&gt;使用 Github Actions 執行轉檔: https://github.com/mdecd2024/test-ag1/blob/main/.github/workflows/main.yml&lt;/p&gt;
&lt;p&gt;倉儲中的 latex 目錄: https://github.com/mdecd2024/test-ag1/tree/main/latex&lt;/p&gt;
&lt;p&gt;利用可攜程式編譯 LaTeX&lt;/p&gt;
&lt;p&gt;下載 miktex-portable.7z (需要密碼, 下載 167MB, 解開壓縮檔案後約 1GB)&lt;/p&gt;
&lt;p&gt;下載 latex_images_github.7z (需要密碼)&lt;/p&gt;
&lt;p&gt;協同產品設計實習分組期中報告 LaTeX 範本:&lt;/p&gt;
&lt;p&gt;下載 cd2024_midterm_report_latex_ex.7z&lt;/p&gt;
&lt;p&gt;設定網誌&lt;/p&gt;
&lt;p&gt;利用 [OBS] 加上廣播系統錄製的: 如何設定個人倉儲中的 Pelican 網誌&lt;/p&gt;
&lt;h1&gt;設定網誌Odoo PLM 功能&lt;/h1&gt;
&lt;p&gt;簡介 Odoo PLM 用法&lt;/p&gt;
&lt;p&gt;設定個人網誌系統&lt;/p&gt;
&lt;p&gt;利用 https://github.com/mdecycu/cmsimde_site 建立的網站, 其動態網站資料位於 config/content.htm, 轉換完成的靜態網站資料位於 content 目錄中.&lt;/p&gt;
&lt;p&gt;網誌的原始檔案位於 markdown 目錄, 所使用的網誌系統為 Pelican, 轉換完成的網誌內容則位於 blog 目錄. 將 markdown 網誌轉為網誌的指令為: pelican markdown -o blog -s local_publishconf.py 表示使用了 local_publishconfig.py 設定, 其餘與 blog 有關的設定檔案還有:&lt;/p&gt;
&lt;p&gt;pelicanconf.py 與 publishconf.py 等.&lt;/p&gt;
&lt;p&gt;為了順利完成上述個人課程網站的網誌設定, 必須根據各用戶所使用的 github 帳號對這三個 .py 檔案進行設定.&lt;/p&gt;
&lt;p&gt;OnShape 帳號&lt;/p&gt;
&lt;p&gt;若網路順暢, 可以登入 https://onshape.com 利用 MKCad Library 或 VEX Part Library 零件程式庫建立產品系統模型.&lt;/p&gt;
&lt;p&gt;CoppeliaSim&lt;/p&gt;
&lt;p&gt;CoppeliaSim 4.5.1 rev1 for IPv6.7z (169MB, password required to download)&lt;/p&gt;
&lt;p&gt;可以結合可攜程式環境: portable_2024.7z (需要密碼, 下載 540MB, 解開壓縮後約 1.8GB) 進行機電系統設計與模擬.&lt;/p&gt;
&lt;p&gt;模型簡化&lt;/p&gt;
&lt;p&gt;為了讓機電產品能在 CoppeliaSim 動態場景中順暢模擬, 各零組件必須有效進行簡化, 此一零件簡化過程如何後續對零組件進行應力或其他動態系統分析之前, 必須先簡化零組件外型後再進行網格化的應用相同.&lt;/p&gt;</content><category term="w1"></category><category term="網誌編寫"></category></entry><entry><title>2024 Spring 課程 w4</title><link href="./2024-Spring-w4-blog-tutorial.html" rel="alternate"></link><published>2024-02-23T16:39:00+08:00</published><updated>2024-03-29T09:14:02+08:00</updated><author><name>41023124</name></author><id>tag:None,2024-02-23:./2024-Spring-w4-blog-tutorial.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;

&lt;h1&gt;每周進度報告w4&lt;/h1&gt;
&lt;p&gt;協同產品設計實習的第四週, 各分組需要明確界定任務需求與分工時序, 隨著各組協同設計流程的進行, 分組倉儲與網站的改版越發複雜, 此時若導入 Source Tree 協助各組員更清楚看到倉儲改版架構, 另外 Git Branch 的應用.&lt;/p&gt;
&lt;h1&gt;教學影片分組整理並自評&lt;/h1&gt;
&lt;p&gt;假如你好奇這個概念哪裡來的: 請參考反思一 and 反思二.&lt;/p&gt;
&lt;p&gt;對於事不關己或者不明白為何團隊中的成員 (這裡指教與學的相關人、事與物), 總讓人提不起興趣, 但若能在過程中找到主要在乎的角色、任務或者緣由, 或許就能從應付著手, 一直到終於了解天下沒有白吃的午餐, 所有的努力付出, 終究不會白費.&lt;/p&gt;
&lt;p&gt;此外, 假如想參考先前學長推甄研究所的相關資訊, 請利用 Team code: n9k585c 進入自行查看.&lt;/p&gt;
&lt;h1&gt;w4 2a 分組任務&lt;/h1&gt;
&lt;p&gt;請各組自行搜尋前面已經發布的教學影片, 分別&lt;/p&gt;
&lt;p&gt;在影片上填上字幕, 另行上傳到可以嵌入到各分組的網站上
從影片字幕中整理出逐字稿, 放在影片下方, 以 .txt 連結安排
並在各嵌入的教學影片下方, 以摘要方式說明該影片的教學重點
Github 個人與分組倉儲的維護方式
個人的倉儲名稱為 cd2024, 而期中的分組倉儲位於 mdecd2024 帳號下, 以2a 開頭, 加上 "-" 之後再補上 midag + 組別, 且各組員的 cd2024 個人倉儲必須設為各分組倉儲的子模組, 目的在各組員可以自行管理並維護自己的課程倉儲, 並決定要引入分組倉儲的內容版次.&lt;/p&gt;
&lt;p&gt;各組員與分組倉儲的資料, 包括文字資料 (含 LaTeX 報告章節資料)、零組件檔案、零件工程圖或組立圖檔 (含 BOM 與爆炸圖), 以及目前正在整理的教學影片, 或者是各學員將操作流程錄製成的影片或 Wink 資料.&lt;/p&gt;</content><category term="w1"></category><category term="網誌編寫"></category></entry><entry><title>2024 Spring 課程 w5</title><link href="./2024-Spring-w5-blog-tutorial.html" rel="alternate"></link><published>2024-02-23T16:39:00+08:00</published><updated>2024-03-29T09:47:12+08:00</updated><author><name>41023124</name></author><id>tag:None,2024-02-23:./2024-Spring-w5-blog-tutorial.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;

&lt;h1&gt;每周進度報告w5&lt;/h1&gt;
&lt;p&gt;協同產品設計實習的第五週, 教學內容為先前影片整理、分組網誌的統整與 NX 零組件繪圖.&lt;/p&gt;
&lt;h1&gt;教學影片分組整理並自評&lt;/h1&gt;
&lt;p&gt;請各組自行搜尋前面已經發布的教學影片, 分別為&lt;/p&gt;
&lt;p&gt;在影片上填上字幕, 另行上傳到可以嵌入到各分組的網站上
從影片字幕中整理出逐字稿, 放在影片下方, 以 .txt 連結安排
並在各嵌入的教學影片下方, 以摘要方式說明該影片的教學重點&lt;/p&gt;
&lt;p&gt;cd2024 2b 4 說明如何將倉儲 import 至 Replit 改版後推回 github&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=F1_YDWsGvwo"&gt;https://www.youtube.com/watch?v=F1_YDWsGvwo&lt;/a&gt;&lt;/p&gt;
&lt;iframe width="560" height="315" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" src="https://www.youtube.com/embed/F1_YDWsGvwo?si=ETYzlygghWgq5wen" title="YouTube video player"&gt;&lt;/iframe&gt;

&lt;p&gt;cd2024 2a 1 blog setup&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=arG0XNdHuYA"&gt;https://www.youtube.com/watch?v=arG0XNdHuYA&lt;/a&gt;&lt;/p&gt;
&lt;iframe width="560" height="315" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" src="https://www.youtube.com/embed/arG0XNdHuYA?si=4gdnM3cydnl0Vq3C" title="YouTube video player"&gt;&lt;/iframe&gt;

&lt;p&gt;cd2024 2b 1 建立個人課程倉儲與網站&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=6BMiOcVb8v0"&gt;https://www.youtube.com/watch?v=6BMiOcVb8v0&lt;/a&gt;&lt;/p&gt;
&lt;iframe width="560" height="315" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" src="https://www.youtube.com/embed/6BMiOcVb8v0?si=X5-MnxK7_Gq9tJgJ" title="YouTube video player"&gt;&lt;/iframe&gt;

&lt;p&gt;cd2024_2b_2_如何從 Replit Account 設定 Connect 連結到 Github&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=3VdJEzJY-oE"&gt;https://www.youtube.com/watch?v=3VdJEzJY-oE&lt;/a&gt;&lt;/p&gt;
&lt;iframe width="560" height="315" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" src="https://www.youtube.com/embed/3VdJEzJY-oE?si=ISL1atN75CkkaQgT" title="YouTube video player"&gt;&lt;/iframe&gt;

&lt;p&gt;cd2024 2b 3 如何設定 Github 帳號的雙重認證&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=pPD1wOjpyfQ"&gt;https://www.youtube.com/watch?v=pPD1wOjpyfQ&lt;/a&gt;&lt;/p&gt;
&lt;iframe width="560" height="315" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" src="https://www.youtube.com/embed/pPD1wOjpyfQ?si=U9TR2NMuhe_u9Ys1" title="YouTube video player"&gt;&lt;/iframe&gt;

&lt;p&gt;cd2024_2b_7_w2 利用 codespaces 維護分組網站&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=3OGCk_aDP9U"&gt;https://www.youtube.com/watch?v=3OGCk_aDP9U&lt;/a&gt;&lt;/p&gt;
&lt;iframe width="560" height="315" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/3OGCk_aDP9U?si=yMsGIIgbKW5y-D_u" title="YouTube video player"&gt;&lt;/iframe&gt;

&lt;p&gt;cd2024_2b_6_w2 從第一組空倉儲建立 cmsimde_site 內容&lt;/p&gt;
&lt;p&gt;{https://www.youtube.com/watch?v=-kkxZlGnUuU](https://www.youtube.com/watch?v=-kkxZlGnUuU)&lt;/p&gt;
&lt;iframe width="560" height="315" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" src="https://www.youtube.com/embed/-kkxZlGnUuU?si=AK-i0udz4_1B5C5E" title="YouTube video player"&gt;&lt;/iframe&gt;

&lt;p&gt;cd2024_2b_5_w2 第一組組長建立 Team 並設定分組倉儲&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=vwYnRnk8K_4"&gt;https://www.youtube.com/watch?v=vwYnRnk8K_4&lt;/a&gt;&lt;/p&gt;
&lt;iframe width="560" height="315" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" src="https://www.youtube.com/embed/vwYnRnk8K_4?si=6Clg0_VxbWCGILLA" title="YouTube video player"&gt;&lt;/iframe&gt;

&lt;p&gt;cd2024_2a_w2_1(41023239楊祐銘)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=i5Nd69gyqGg"&gt;https://www.youtube.com/watch?v=i5Nd69gyqGg&lt;/a&gt;&lt;/p&gt;
&lt;iframe width="560" height="315" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" src="https://www.youtube.com/embed/i5Nd69gyqGg?si=oxddneY7WmtC4J9N" title="YouTube video player"&gt;&lt;/iframe&gt;

&lt;p&gt;cd2024 2a w2 4 利用 Replit 管理 Github Classroom 分組倉儲(41023239楊祐銘)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=N_Tx_ZJjoJ0"&gt;https://www.youtube.com/watch?v=N_Tx_ZJjoJ0&lt;/a&gt;&lt;/p&gt;
&lt;iframe width="560" height="315" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/N_Tx_ZJjoJ0?si=ElBKbH9R9bQXXMVD" title="YouTube video player"&gt;&lt;/iframe&gt;

&lt;p&gt;wcm2024_1a_w3_2_將組員的個人倉儲納為分組倉儲的子模組&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=-E0uNJhDqWg"&gt;https://www.youtube.com/watch?v=-E0uNJhDqWg&lt;/a&gt;&lt;/p&gt;
&lt;iframe width="560" height="315" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/w5JspsZ91Dc?si=WdhATyhj6z_h4rxs" title="YouTube video player"&gt;&lt;/iframe&gt;

&lt;p&gt;cd2024 2b w3 使用 gitpod 與 localhost 維護個人倉儲&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=8YSZDEVwlb8"&gt;https://www.youtube.com/watch?v=8YSZDEVwlb8&lt;/a&gt;&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/8YSZDEVwlb8?si=1mRVceJ9sHF6QcZR" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h1&gt;如何統整組員子模組中的協同設計網誌&lt;/h1&gt;
&lt;p&gt;當各組員每週的協同設計網誌文章放在個別的 cd2024 倉儲的 markdown 目錄中, 只要修改分組倉儲中的 pelicalconf.py, 使用 Pelican 設定中的 PATH 與 OUTPUT_PATH 變數, 指定網誌統整目錄, 就可以在分組倉儲中納入所有組員在子模組中所編寫的協同網誌.&lt;/p&gt;
&lt;p&gt;實際的設定操作 pelicanconf_py.txt, 是利用 pelicanconf.py 中的程式設定段, 將子模組中 markdown 目錄的 .md 動態複製到分組倉儲中的 combined_directory, 並避開分組倉儲與學員子模組倉儲中的 pages 目錄下的 .md 檔案後, 再進行網誌轉檔, 並且所產生的網誌超文件將存入所設定的 blog 目錄.&lt;/p&gt;
&lt;p&gt;完成設定後的網誌轉檔指令為: pelican -s local_publishconf.py 表示要利用 local_publishconf.py 的設定進行轉檔, 且先前有關 pelicanconf.py 的設定也將導入執行.&lt;/p&gt;
&lt;p&gt;過程中, 各組員必須將個別的網誌 .md 檔案名稱加上前綴字串, 例如: "學號_" 加上獨一無二的網誌 Slug 字串名稱, 且 Category 使用該組員的學號作為標示. 之後各組統整轉檔時, 才不至於發生相同網誌文章檔案名稱衝突的錯誤, 且從各分組網誌的 Categories 中即可找到各組員所編寫的所有網誌內容.&lt;/p&gt;</content><category term="w5"></category><category term="網誌編寫"></category></entry><entry><title>2024 Spring 課程w6</title><link href="./2024-Spring-w6-blog-tutorial.html" rel="alternate"></link><published>2024-02-23T16:39:00+08:00</published><updated>2024-03-29T09:46:42+08:00</updated><author><name>41023124</name></author><id>tag:None,2024-02-23:./2024-Spring-w6-blog-tutorial.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;


&lt;h1&gt;更新分組倉儲中的分組倉儲&lt;/h1&gt;
&lt;p&gt;cd2024 2a w6 取下子模組, 以及更新學員倉儲內容&lt;/p&gt;
&lt;p&gt;教學影片如下:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://youtu.be/BtYUHe8Actk?si=zpEdRXOtQluT22Fk"&gt;https://youtu.be/BtYUHe8Actk?si=zpEdRXOtQluT22Fk&lt;/a&gt;&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/BtYUHe8Actk?si=zpEdRXOtQluT22Fk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;cd2024 2a w6 利用 pelicanconf py 整合各組員的網誌&lt;/p&gt;
&lt;p&gt;教學影片如下:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=XkImjlZSGGk"&gt;https://www.youtube.com/watch?v=XkImjlZSGGk&lt;/a&gt;&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/BtYUHe8Actk?si=0mHqnk2xulotnRJg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;協同產品設計實習的第六週, 說明協同 NX 零組件繪圖以及 CoppeliaSim 場景模擬相關檔案格式.&lt;/p&gt;
&lt;h1&gt;ODOO PLM 論文中英並列任務&lt;/h1&gt;
&lt;p&gt;由各組員在其個人的 cd2024 倉儲中, 以 LaTeX 格式分工完成下列文章的英文與中文翻譯並列資料, 最後在分組網站的 Release 或 downloads 區完成 2b-midbgx_report.pdf 的製作.&lt;/p&gt;
&lt;p&gt;若要在近端使用可攜程式環境編譯分組 LaTeX 報告, 請下載 miktex-portable.7z (需要密碼, 下載 167MB, 解開壓縮檔案後約 1GB) 以及參考資料: latex_images_github.7z (需要密碼)&lt;/p&gt;
&lt;h1&gt;教學影片分組整理並自評&lt;/h1&gt;
&lt;p&gt;請各組自行搜尋前面已經發布的教學影片, 分別
在影片上填上字幕, 另行上傳到可以嵌入到各分組的網站上
從影片字幕中整理出逐字稿, 放在影片下方, 以 .txt 連結安排
並在各嵌入的教學影片下方, 以摘要方式說明該影片的教學重點&lt;/p&gt;</content><category term="w6"></category><category term="網誌編寫"></category></entry></feed>